// Network Libraries Test for DariX
// Tests: HTTP (enhanced), Socket, WebSocket, DNS, SMTP

import "go:http";
import "go:socket";
import "go:dns";
import "go:smtp";
import "go:websocket";

print("🌐 DariX Network Libraries Test");
print("===============================");

var total_tests = 0;
var passed_tests = 0;

func test(name, result) {
    total_tests = total_tests + 1;
    if (result) {
        print("✅ " + name);
        passed_tests = passed_tests + 1;
    } else {
        print("❌ " + name);
    }
}

print("\n🔗 Testing Enhanced HTTP Library:");
print("----------------------------------");

// Test HTTP timeout setting
var timeout_result = http_set_timeout(10);
test("http_set_timeout", timeout_result);

// Test HTTP GET
try {
    var response = http_get("https://httpbin.org/get");
    test("http_get", type(response) == "MAP");
} catch (e) {
    print("⚠️  http_get: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1; // Don't count network-dependent tests
}

// Test HTTP HEAD
try {
    var head_response = http_head("https://httpbin.org/status/200");
    test("http_head", type(head_response) == "MAP");
} catch (e) {
    print("⚠️  http_head: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

// Test HTTP OPTIONS
try {
    var options_response = http_options("https://httpbin.org/status/200");
    test("http_options", type(options_response) == "MAP");
} catch (e) {
    print("⚠️  http_options: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

// Test HTTP POST with custom request
try {
    var custom_response = http_request("POST", "https://httpbin.org/post", "{\"test\": \"data\"}", {"Content-Type": "application/json"});
    test("http_request", type(custom_response) == "MAP");
} catch (e) {
    print("⚠️  http_request: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

print("\n🔌 Testing Socket Library:");
print("---------------------------");

// Test TCP socket creation (basic functionality)
try {
    // Create a TCP listener on a random port
    var listener = socket_tcp_listen(0); // Port 0 = random available port
    test("socket_tcp_listen", type(listener) == "MAP");
    
    if (type(listener) == "MAP") {
        var socket_id = listener["socket_id"];
        
        // Test getting local address
        var local_addr = socket_get_local_addr(socket_id);
        test("socket_get_local_addr", type(local_addr) == "STRING");
        
        // Close the listener
        var close_result = socket_tcp_close(socket_id);
        test("socket_tcp_close", close_result);
    }
} catch (e) {
    print("⚠️  Socket tests failed: " + str(e));
    total_tests = total_tests - 3;
}

// Test UDP socket creation
try {
    var udp_socket = socket_udp_listen(0); // Random port
    test("socket_udp_listen", type(udp_socket) == "MAP");
    
    if (type(udp_socket) == "MAP") {
        var socket_id = udp_socket["socket_id"];
        
        // Close the UDP socket
        var close_result = socket_udp_close(socket_id);
        test("socket_udp_close", close_result);
    }
} catch (e) {
    print("⚠️  UDP socket test failed: " + str(e));
    total_tests = total_tests - 2;
}

print("\n🌍 Testing DNS Library:");
print("------------------------");

// Test DNS lookup
try {
    var dns_result = dns_lookup("google.com");
    test("dns_lookup", type(dns_result) == "MAP");
    
    if (type(dns_result) == "MAP") {
        var ips = dns_result["ips"];
        test("dns_lookup_has_ips", type(ips) == "ARRAY");
    }
} catch (e) {
    print("⚠️  dns_lookup: " + str(e) + " (network dependent)");
    total_tests = total_tests - 2;
}

// Test reverse DNS lookup
try {
    var reverse_result = dns_reverse("8.8.8.8");
    test("dns_reverse", type(reverse_result) == "MAP");
} catch (e) {
    print("⚠️  dns_reverse: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

// Test MX record lookup
try {
    var mx_result = dns_lookup_mx("google.com");
    test("dns_lookup_mx", type(mx_result) == "MAP");
} catch (e) {
    print("⚠️  dns_lookup_mx: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

// Test TXT record lookup
try {
    var txt_result = dns_lookup_txt("google.com");
    test("dns_lookup_txt", type(txt_result) == "MAP");
} catch (e) {
    print("⚠️  dns_lookup_txt: " + str(e) + " (network dependent)");
    total_tests = total_tests - 1;
}

// Test IP validation (these should work offline)
var ip_valid = dns_is_valid_ip("192.168.1.1");
test("dns_is_valid_ip_valid", type(ip_valid) == "MAP");

var ip_invalid = dns_is_valid_ip("999.999.999.999");
test("dns_is_valid_ip_invalid", type(ip_invalid) == "MAP");

// Test domain validation
var domain_valid = dns_is_valid_domain("example.com");
test("dns_is_valid_domain_valid", type(domain_valid) == "MAP");

var domain_invalid = dns_is_valid_domain("invalid..domain");
test("dns_is_valid_domain_invalid", type(domain_invalid) == "MAP");

print("\n📧 Testing SMTP Library (Connection Test Only):");
print("------------------------------------------------");

// Note: SMTP tests are commented out as they require actual SMTP server
// These are examples of how to use the SMTP library:

print("📝 SMTP Usage Examples:");
print("// Test SMTP connection:");
print("// var smtp_test = smtp_test_connection('smtp.gmail.com', 587);");
print("");
print("// Send plain text email:");
print("// var email_result = smtp_send_with_auth(");
print("//     'smtp.gmail.com', 587, 'user@gmail.com', 'password',");
print("//     'from@example.com', 'to@example.com', 'Subject', 'Body');");
print("");
print("// Send HTML email:");
print("// var html_result = smtp_send_html(");
print("//     'smtp.gmail.com', 587, 'from@example.com', 'to@example.com',");
print("//     'HTML Subject', '<h1>HTML Body</h1>');");

// Test SMTP functions exist (without actually connecting)
test("smtp_send_email_exists", type(smtp_send_email) == "BUILTIN");
test("smtp_send_html_exists", type(smtp_send_html) == "BUILTIN");
test("smtp_send_with_auth_exists", type(smtp_send_with_auth) == "BUILTIN");
test("smtp_test_connection_exists", type(smtp_test_connection) == "BUILTIN");

print("\n🌐 Testing WebSocket Library (Function Availability):");
print("------------------------------------------------------");

// Note: WebSocket tests require actual WebSocket server
// Testing function availability instead

test("ws_connect_exists", type(ws_connect) == "BUILTIN");
test("ws_send_exists", type(ws_send) == "BUILTIN");
test("ws_receive_exists", type(ws_receive) == "BUILTIN");
test("ws_close_exists", type(ws_close) == "BUILTIN");
test("ws_ping_exists", type(ws_ping) == "BUILTIN");
test("ws_is_connected_exists", type(ws_is_connected) == "BUILTIN");

print("📝 WebSocket Usage Examples:");
print("// Connect to WebSocket:");
print("// var ws = ws_connect('wss://echo.websocket.org');");
print("// var ws_id = ws['ws_id'];");
print("");
print("// Send message:");
print("// ws_send(ws_id, 'Hello WebSocket!', 'text');");
print("");
print("// Receive message:");
print("// var message = ws_receive(ws_id);");
print("// print('Received:', message['message']);");
print("");
print("// Close connection:");
print("// ws_close(ws_id, 'Goodbye');");

print("\n📊 Network Libraries Test Summary:");
print("===================================");
print("Total Tests: " + str(total_tests));
print("Passed: " + str(passed_tests));
print("Failed: " + str(total_tests - passed_tests));

var success_rate = 0;
if (total_tests > 0) {
    success_rate = (passed_tests * 100) / total_tests;
}
print("Success Rate: " + str(success_rate) + "%");

if (passed_tests == total_tests) {
    print("\n🎉 All network library tests passed!");
    print("✅ Enhanced HTTP library with advanced features");
    print("✅ Socket library for TCP/UDP communication");
    print("✅ DNS library for domain name resolution");
    print("✅ SMTP library for email sending");
    print("✅ WebSocket library for real-time communication");
} else {
    print("\n⚠️  Some tests failed or were skipped due to network dependencies");
    print("Note: Many network tests require internet connection and external services");
}

print("\n🌐 Network Library Features Available:");
print("======================================");

print("\n📡 Enhanced HTTP Library:");
print("- http_get, http_post, http_put, http_delete, http_patch");
print("- http_head, http_options, http_request (custom)");
print("- http_download, http_upload (file operations)");
print("- http_set_timeout, http_get_cookies, http_set_cookies");

print("\n🔌 Socket Library:");
print("- TCP: socket_tcp_connect, socket_tcp_listen, socket_tcp_accept");
print("- TCP: socket_tcp_send, socket_tcp_receive, socket_tcp_close");
print("- UDP: socket_udp_connect, socket_udp_listen");
print("- UDP: socket_udp_send, socket_udp_receive, socket_udp_close");
print("- Utilities: socket_set_timeout, socket_get_local_addr, socket_get_remote_addr");

print("\n🌍 DNS Library:");
print("- dns_lookup, dns_reverse, dns_lookup_mx, dns_lookup_txt");
print("- dns_lookup_cname, dns_lookup_ns");
print("- dns_is_valid_ip, dns_is_valid_domain");

print("\n📧 SMTP Library:");
print("- smtp_send_email, smtp_send_html, smtp_send_with_auth");
print("- smtp_test_connection");

print("\n🌐 WebSocket Library:");
print("- ws_connect, ws_send, ws_receive, ws_close");
print("- ws_ping, ws_is_connected, ws_set_timeout");

print("\n🚀 Network Libraries Test Complete!");
