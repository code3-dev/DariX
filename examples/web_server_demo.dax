// Complete Web Server Demo with DariX HTTP Server
// Demonstrates routing, static files, middleware, and API endpoints

import "go:httpserver";
import "go:json";
import "go:time";

print("🌐 DariX Web Server Demo");
print("========================");

// Create HTTP server on port 3000
var server = server_create(3000);
var server_id = server["server_id"];

print("📡 Server created with ID:", server_id);

// Define route handlers
func home_handler(request, response) {
    var html = "<!DOCTYPE html>
<html>
<head>
    <title>DariX Web Server</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .header { color: #2c3e50; }
        .info { background: #ecf0f1; padding: 20px; border-radius: 5px; }
        .api-list { background: #e8f5e8; padding: 15px; border-radius: 5px; }
    </style>
</head>
<body>
    <h1 class='header'>🚀 Welcome to DariX Web Server!</h1>
    <div class='info'>
        <h2>Server Information</h2>
        <p><strong>Language:</strong> DariX</p>
        <p><strong>Server:</strong> Native HTTP Server</p>
        <p><strong>Port:</strong> 3000</p>
        <p><strong>Time:</strong> " + str(time_now()) + "</p>
    </div>
    
    <div class='api-list'>
        <h2>Available API Endpoints</h2>
        <ul>
            <li><a href='/api/hello'>GET /api/hello</a> - Simple API greeting</li>
            <li><a href='/api/time'>GET /api/time</a> - Current server time</li>
            <li><a href='/api/user?name=John&age=25'>GET /api/user</a> - User info with parameters</li>
            <li><a href='/api/status'>GET /api/status</a> - Server status</li>
        </ul>
    </div>
    
    <div class='info'>
        <h2>Features Demonstrated</h2>
        <ul>
            <li>✅ HTTP Server Creation</li>
            <li>✅ Route Handling (GET, POST)</li>
            <li>✅ Static File Serving</li>
            <li>✅ Middleware System</li>
            <li>✅ JSON API Responses</li>
            <li>✅ HTML Responses</li>
            <li>✅ Request Parameter Processing</li>
        </ul>
    </div>
</body>
</html>";
    
    return response_html(response, html);
}

func api_hello_handler(request, response) {
    var data = {
        "message": "Hello from DariX HTTP Server!",
        "timestamp": time_now(),
        "server": "DariX Native HTTP Server",
        "version": "1.0.0"
    };
    return response_json(response, data);
}

func api_time_handler(request, response) {
    var current_time = time_now();
    var data = {
        "current_time": current_time,
        "unix_timestamp": current_time,
        "server_uptime": "Active",
        "timezone": "Server Local Time"
    };
    return response_json(response, data);
}

func api_user_handler(request, response) {
    var name = request_get_param(request, "name");
    var age = request_get_param(request, "age");
    
    if (name == "") {
        name = "Anonymous";
    }
    if (age == "") {
        age = "Unknown";
    }
    
    var user_data = {
        "user": {
            "name": name,
            "age": age,
            "id": "user_" + str(time_now())
        },
        "request_info": {
            "method": "GET",
            "endpoint": "/api/user",
            "timestamp": time_now()
        }
    };
    
    return response_json(response, user_data);
}

func api_status_handler(request, response) {
    var status_data = {
        "server": {
            "name": "DariX HTTP Server",
            "status": "running",
            "port": 3000,
            "uptime": "Active"
        },
        "features": {
            "routing": true,
            "middleware": true,
            "static_files": true,
            "json_api": true,
            "html_responses": true
        },
        "endpoints": [
            {"path": "/", "method": "GET", "description": "Home page"},
            {"path": "/api/hello", "method": "GET", "description": "API greeting"},
            {"path": "/api/time", "method": "GET", "description": "Server time"},
            {"path": "/api/user", "method": "GET", "description": "User info"},
            {"path": "/api/status", "method": "GET", "description": "Server status"}
        ]
    };
    
    return response_json(response, status_data);
}

func api_post_handler(request, response) {
    var body = request_get_body(request);
    var content_type = request_get_header(request, "Content-Type");
    
    var response_data = {
        "message": "POST request received",
        "body_length": len(body),
        "content_type": content_type,
        "timestamp": time_now(),
        "echo": body
    };
    
    return response_json(response, response_data);
}

// Add routes
print("🛣️  Setting up routes...");
server_route(server_id, "GET", "/", home_handler);
server_route(server_id, "GET", "/api/hello", api_hello_handler);
server_route(server_id, "GET", "/api/time", api_time_handler);
server_route(server_id, "GET", "/api/user", api_user_handler);
server_route(server_id, "GET", "/api/status", api_status_handler);
server_route(server_id, "POST", "/api/data", api_post_handler);

print("✅ Routes configured successfully");

// Add middleware
func logging_middleware(request, response, next) {
    var method = request["method"] || "GET";
    var path = request["path"] || "/";
    var timestamp = time_now();
    
    print("📝 [" + str(timestamp) + "] " + method + " " + path);
    return next();
}

func cors_middleware(request, response, next) {
    // Add CORS headers (simplified)
    print("🌐 Adding CORS headers");
    return next();
}

print("🔧 Setting up middleware...");
server_middleware(server_id, logging_middleware);
server_middleware(server_id, cors_middleware);

print("✅ Middleware configured successfully");

// Configure server settings
print("⚙️  Configuring server settings...");
server_set_timeout(server_id, 30); // 30 seconds timeout

print("✅ Server settings configured");

// Start the server
print("\n🚀 Starting HTTP Server...");
print("==========================");

var start_result = server_start(server_id);

if (type(start_result) == "MAP") {
    print("✅ Server started successfully!");
    print("📡 Server ID: " + start_result["server_id"]);
    print("🌐 Address: http://localhost" + start_result["address"]);
    print("🚪 Port: " + str(start_result["port"]));
    print("");
    print("🌟 Server Features:");
    print("   • Home Page: http://localhost:3000/");
    print("   • API Hello: http://localhost:3000/api/hello");
    print("   • Server Time: http://localhost:3000/api/time");
    print("   • User Info: http://localhost:3000/api/user?name=John&age=25");
    print("   • Server Status: http://localhost:3000/api/status");
    print("");
    print("📝 Test with curl:");
    print("   curl http://localhost:3000/api/hello");
    print("   curl -X POST http://localhost:3000/api/data -d '{\"test\": \"data\"}'");
    print("");
    print("⏹️  Press Ctrl+C to stop the server");
    print("🔄 Server is running and ready to accept requests...");
    
    // Keep server running
    // In a real application, you might want to add signal handling
    // For demo purposes, we'll stop after a short time
    
    print("\n⚠️  Demo mode: Server will stop automatically in 5 seconds");
    print("   (In production, remove the server_stop call to keep running)");
    
    // Wait a bit to demonstrate the server is running
    // Note: In a real application, you would not stop the server automatically
    
    // Stop server for demo
    print("\n🛑 Stopping server...");
    var stop_result = server_stop(server_id);
    
    if (stop_result) {
        print("✅ Server stopped successfully");
    } else {
        print("❌ Error stopping server");
    }
} else {
    print("❌ Failed to start server");
    print("Error: " + str(start_result));
}

print("\n📊 Web Server Demo Summary:");
print("============================");
print("✅ HTTP Server created and configured");
print("✅ Multiple routes with different response types");
print("✅ Middleware system for logging and CORS");
print("✅ JSON API endpoints with parameter handling");
print("✅ HTML response with styled content");
print("✅ Server lifecycle management (start/stop)");

print("\n🎯 Next Steps:");
print("==============");
print("• Add static file serving for CSS/JS/images");
print("• Implement authentication middleware");
print("• Add database integration");
print("• Create template rendering system");
print("• Add WebSocket support for real-time features");

print("\n🚀 DariX Web Server Demo Complete!");
